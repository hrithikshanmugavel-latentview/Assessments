# -*- coding: utf-8 -*-
"""Anomaly-Final-Assessment

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1taie2luszI3QzpfuyLD5qTt7qwAa-7Eh
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split

df=pd.read_csv('/content/anomaly_train.csv')

## Data Preprocessing

df.shape

df.info()

df.describe(include="all").T

df.info()

df.isnull().sum()

df.duplicated().sum()

df.drop_duplicates(inplace=True)
df.head()

## Exploratory Data Analysis

for col in df.select_dtypes(include=['float','int']).columns:
  sns.histplot(df[col], kde=True)
  plt.title(f" Histogram of {col} ")
  plt.xlabel(col)
  plt.ylabel("Frequency")
  plt.show()

for col in df.select_dtypes(include=['object']).columns:
  sns.barplot(df[col])
  plt.title(f" Bar Chart of {col} ")
  plt.xlabel(col)
  plt.ylabel("Frequency")
  plt.show()

## Bivariate Analysis

num = df.select_dtypes(include=['float','int']).columns

for i in range(len(num)):
  for j in range(i+1, len(num)):
    sns.scatterplot(data=df, x=num[i], y=num[j])
    plt.xlabel(col)
    plt.ylabel("Frequency")
    plt.show()

## Handling Outliers

for column in df.select_dtypes(include=['float64','int64']):
  sns.boxplot(df[column])
  plt.show()


# for column in df.select_dtypes(include = "number"):
#   q1 = df[column].quantile(0.25)
#   q3 = df[column].quantile(0.75)
#   iqr = q3-q1
#   lower = q1 - 1.5*iqr
#   upper = q3 + 1.5* iqr
#   df[column] = df[column].clip(lower = lower, upper= upper)

from sklearn.preprocessing import LabelEncoder, MinMaxScaler

le = LabelEncoder()

for col in df.select_dtypes(include=["object"]).columns:
  df[col] = le.fit_transform(df[col])

df.head()

correlation_matrix = df.corr()

correlation_matrix

plt.figure(figsize=(8, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.show()

X=df[['Amount','Time', 'Location']]

isf = IsolationForest(n_estimators=100, contamination=0.1)
isf.fit(X)
y_pred=isf.predict(X)

df['anomaly_score']=isf.decision_function(X)
df['anomaly'] = y_pred
df.head()

anamolies=df.loc[df['anomaly']==-1]
anamolies

anamolies.shape

plt.scatter(df['User'],df['anomaly_score'],label='normal')
plt.scatter(anamolies['User'],anamolies['anomaly_score'],label='anomaly')
plt.xlabel('User')
plt.ylabel('anomaly_score')
plt.legend()
plt.show()

df['is_anomaly'] = df['anomaly'].map({-1:"yes",1:"no"})
df