# -*- coding: utf-8 -*-
"""LVADSUSR156-HRITHIK_S

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DdY_pUCkzu6RUeMdu07EZKFyy3WIXFto
"""

import math
import datetime
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

## Qn-1

## a. Load Dataset

import pandas as pd

df = pd.read_csv("/content/Final Dataset - IPL.csv")
df

## b. Examining the basic information

df.info()

# From this it is conclusive that the data set contains totally 74 rows with 20 column
# which comprises seven(7) numeric columns
# and thirteen(13) objects which includes the datetime

## Qn-2

## a. Handling missing and null values.

df.isnull().sum()

# No column has null values

df.fillna("NA")

# This fill if the column contains the null values with string "NA"

## b. Handling the duplicate values from the data set

df.duplicated()
# No duplicated data found

df.drop_duplicates()
# Drop duplicates if exists

## Qn-3 : Descriptive Statistics

## a. Finding the statistical measures for numerical data

df.describe()

# This returns the analytical measures for the data of the numerical columns
# It returns the mean, standard deviation etc,. for each numerical column exists.

# Finding the median, mode, range, variance for the numerical data

median = df["match_id"].median()

print(median)

data = pd.DataFrame(
    {
       "match_id":[df["match_id"].median(), df["match_id"].mode(), df["match_id"].var(), (df["match_id"].max()) - (df["match_id"].min())],
       "first_ings_score":[df["first_ings_score"].median(), df["first_ings_score"].mode(), df["first_ings_score"].var(), (df["first_ings_score"].max()) - (df["first_ings_score"].min())],
       "first_ings_wkts":[df["first_ings_wkts"].median(), df["first_ings_wkts"].mode(), df["first_ings_wkts"].var(), (df["first_ings_wkts"].max()) - (df["first_ings_wkts"].min())],
       "second_ings_score":[df["second_ings_score"].median(), df["second_ings_score"].mode(), df["second_ings_score"].var(), (df["second_ings_score"].max()) - (df["second_ings_score"].min())],
       "second_ings_wkts":[df["second_ings_wkts"].median(), df["second_ings_wkts"].mode(), df["second_ings_wkts"].var(), (df["second_ings_wkts"].max()) - (df["second_ings_wkts"].min())],
       "margin":[df["margin"].median(), df["margin"].mode(), df["margin"].var(), (df["margin"].max()) - (df["margin"].min())],
       "highscore":[df["highscore"].median(), df["highscore"].mode(), df["highscore"].var(), (df["highscore"].max()) - (df["highscore"].min())]

    }, index = ("Median", "Mode", "Variance", "Range")
)

print(data)

# The above data frame returns the median, mode, variance, and range for the numerical values.

## Qn-4 - Data Visualization

# Histogram Chart

sns.histplot(x = df["highscore"], bins=10)

plt.xlabel("Highest Score by Batman in Each match")
plt.ylabel("Number of Batsman Scored across matches")
plt.title("Highest Score Distribution across matches")

plt.xticks(range(20, 150, 20))
plt.yticks(range(0, 20, 2))

plt.show()

print("\n\n\n")

# Scatter Plot

plt.scatter(df['first_ings_score'], df['second_ings_score'], color='green')
plt.xlabel("First Innings Score")
plt.ylabel("Second Innings Score")
plt.title("Match Scores Distribution in each Innings")
plt.grid()

plt.show()

print("\n\n\n")

# These Visualizations Shows the Highest Score Distribution across matches
# and Scores in Each innings

## Qn-5

# a. Correlation between Toss Decisions and its Winning impact


plt.scatter(df['toss_winner'], df['match_winner'], color='brown')
plt.xlabel("Toss Winning Team")
plt.ylabel("Match Winner")
plt.title("Correlation between Toss and Match Winning impact")
plt.grid()

plt.xticks(rotation=45)

plt.show()

# This shows that how the Toss decisions and match winning impacts correlated
# with the help of the scatter plots
# By, this we can conclude that Toss Winning is an important factor for match winning

## QN-6 - OUTLIER DETECTION

total_score_by_team = df.groupby("team1")['first_ings_score'].sum()


sns.boxplot(x = df["margin"], y = df["first_ings_score"])
plt.xticks(range(0, 100, 20))

plt.show()

# The above shows that there is outlier where few matches have the bigger margin of winning

## Qn-7

matches_in_venue = df.groupby('venue')['match_id'].count()

plt.pie(matches_in_venue)
plt.legend(df['venue'])

plt.title("Distribution of Matches Played in Each Venue")

# Distribution of Matches played in Venue found with the help of pie and Mumbai holds almost all matches as host

## QN-8

player_of_match_count = df.groupby('player_of_the_match')['match_id'].count().nlargest(5)

player_of_match_count.plot(kind='bar', color='darkgreen')

plt.xticks(rotation=0)
plt.xlabel("Players")
plt.ylabel("Number of player of match awards")
plt.title("High Performing Players")

plt.show()


## Kuldeep Yadav is the high performing player in season with 4 Man of match awards

# ## QN - 9

# By the above  Visualizations we can conclude that most matches played and number of teams played
# It also shows who won most the time and toss deciding match winning factor and high performing player.